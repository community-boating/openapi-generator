openapi: 3.0.3
info:
  title: Simple API with JWT Auth
  version: 1.0.0
  description: A minimal OpenAPI spec with JWT authentication and simple models.

servers:
  - url: https://api.example.com

paths:
  /login:
    post:
      summary: User login
      description: Returns a JWT token on successful login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials

  /users/me/{id}/{test}:
    get:
      summary: Get current user
      description: Returns the details of the currently authenticated user.
      security:
        - staff: []
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
        - in: path
          name: test # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Test
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTest'
        '401':
          description: Unauthorized
  /member/getNoParams:
    get:
      summary: Test
      description: Tests Post.
      responses:
        '200':
          description: All good
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Boolean'
  /member/test:
    post:
      summary: Test
      description: Tests Post.
      security:
        - member: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResponse'
        '401':
          description: Invalid credentials

  /ap-class/get-eligible:
    get:
      summary: Get eligible classes
      description: Gets eligible class information for the supplied person_id
      security:
        - member: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonId'
      responses:
        '200':
          description: Successfully fetched classes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APEligibleClass'
        '204' :
          description: No classes to show
        '401' :
          description: Invalid credentials
        '403' :
          description: Invalid permissions

  /ap-class/get-future:
    get:
      x-serve-example: true
      summary: Get eligible classes
      description: Gets eligible class information for the supplied person_id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonId'
      responses:
        '200':
          description: Successfully fetched classes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APFutureClass'
        '204' :
          description: No classes to show
        '401' :
          description: Invalid credentials
        '403' :
          description: Invalid permissions

  /ap-class/enroll/{id}: #EVAN TEST CODE; AUDIT THOROUGHLY
    post:
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            minimum: 1
          description: The class id
      #x-serve-example: true
      summary: Enroll person into class
      description: Posts person_id and class_instance_id
      security:
        - member: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APClassEnroll'
      responses:
        '202':
          description: TEST OK

  /orders/upsert:
    post:
      description: 'Updates or inserts order and subobjects into the database for further use in the order system'
      parameters: []
      security:
        - member: []
        - staff: []
      tags:
        - CompassOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '200':
          description: Successfully updated/inserted order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
  /orders/cancel/{id}:
    post:
      description: 'Cancels an order, deleting if possible'
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            minimum: 1
          description: The order ID
      tags:
        - CompassOrder
      responses:
        '200':
          description: Successfully cancelled the order
  /catalog:
    get:
      description: 'Gets the current catalog'
      tags:
        - Catalog
      responses:
        '200':
          description: Successfully gets the catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogDTO'
    post:
      description: 'Updates the current catalog'
      tags:
        - Catalog
      security:
        - staff: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogDTO'
      responses:
        '200':
          description: Successfully returns the updated catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogDTO'


components:
  securitySchemes:
    staff:
      type: http
      scheme: bearer
      bearerFormat: JWT
    member:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CatalogDTO:
      type: object
      properties:
        assignId:
          type: integer
        isActive:
          type: boolean
        catalogName:
          type: string
          maxLength: 200
        items:
          type: array
          items:
            $ref: '#/components/schemas/CatalogItemDTO'
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/CatalogTaxDTO'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CatalogCategoryDTO'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/CatalogDiscountDTO'
        products:
          type: array
          items:
            $ref: '#/components/schemas/CatalogProductDTO'
    CatalogTaxDTO:
      required: [taxName, taxRate, taxMinValueCents]
      properties:
        assignId:
          type: integer
        taxName:
          type: string
          maxLength: 200
        taxCode:
          type: string
          maxLength: 500
        taxRate:
          type: string
          maxLength: 200
        taxMinValueCents:
          type: integer
    CatalogCategoryDTO:
      properties:
        assignId:
          type: integer
        categoryName:
          type: string
          maxLength: 200
    
    CatalogDiscountDTO:
      properties:
        discountId:
          type: integer
        discountAmountCents:
          type: integer
        discountName:
          type: string
          maxLength: 100
        instances:
          type: array
          items:
            $ref: '#/components/schemas/CatalogDiscountInstanceDTO'
    CatalogDiscountInstanceDTO:
      properties:
        instanceId:
          type: integer
        discountAmountCents:
          type: integer
    CatalogItemInstanceDTO:
      type: object
      properties:
        assignId:
          type: integer
          example: 12
        itemPriceCents:
          type: integer
          example: 12
        isActive:
          type: boolean
    CatalogItemDTO:
      required: [type]
      properties:
        assignId:
          type: integer
        itemType:
          nullable: false
          $ref: '#/components/schemas/ItemType'
        classTypeId:
          nullable: true
          type: integer
        membershipTypeId:
          nullable: true
          type: integer
        productId:
          nullable: true
          type: integer
        itemName:
          nullable: true
          type: string
          maxLength: 200
        itemDescription:
          nullable: true
          type: string
          maxLength: 500
        imageURL:
          nullable: true
          type: string
          maxLength: 200
        itemPriceCents:
          nullable: true
          type: integer
        itemInstances:
          type: array
          items:
            $ref: '#/components/schemas/CatalogItemInstanceDTO'
        itemDiscounts:
          type: array
          items:
            $ref: '#/components/schemas/CatalogItemDiscountDTO'
        itemTaxes:
          type: array
          items:
            $ref: '#/components/schemas/CatalogItemTaxDTO'
        itemCategories:
          type: array
          items:
            $ref: '#/components/schemas/CatalogItemCategoryDTO'
        
    ItemType:
      type: string
      enum:
        - 'MEMBERSHIP'
        - 'PAID_CLASS'
        - 'DONATION'
        - 'DAMAGE_WAIVER'
        - 'GUEST_PRIVS'
        - 'PRODUCT'
    CatalogItemDiscountDTO:
      properties:
        assignId:
          type: integer
        discountId:
          type: integer
    CatalogItemTaxDTO:
      properties:
        assignId:
          type: integer
        taxId:
          type: integer
    CatalogItemCategoryDTO:
      required: [assignId]
      properties:
        assignId:
          type: integer
        categoryId:
          type: integer
    CatalogProductDTO:
      required: [assignId, productName, productDescription, active]
      properties:
        assignId:
          type: integer
        productName:
          type: string
          maxLength: 200
        productDescription:
          type: string
          maxLength: 500
        active:
          type: boolean
    OrderDTOWithDiscounts:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/OrderDTO'
        availableDiscounts:
          type: array
          items:
            $ref: '#/components/schemas/CatalogDiscountInstanceDTO'
    OrderDTO:
      type: object
      required: [status, lineItems, orderNum]
      properties:
        orderId:
          nullable: true
          type: integer
          example: 12
          readOnly: true
        orderNum:
          type: string
          example: '#69420'
        orderComputedCents:
          type: integer
          example: 1222
          readOnly: true
        orderAmountPaid:
          type: integer
          example: 122
          readOnly: true
        status:
          $ref: '#/components/schemas/OrderStatus'
          readOnly: true
        personId:
          type: integer
          example: 12
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItemDTO'
        appliedTaxes:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/OrderTaxDTO'
        orderPayments:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/OrderPaymentDTO'
    OrderPaymentDTO:
      type: object
      properties:
        assignId:
          nullable: false
          type: integer
        paymentType:
          nullable: false
          type: string
          maxLength: 50
        paymentAmountCents:
          nullable: false
          type: integer
        paymentStatus:
          nullable: false
          type: string
          maxLength: 50
        paymentDueDate:
          nullable: true
          type: string
          format: date-time
    OrderTaxDTO:
      type: object
      properties:
        assignId:
          type: integer
          example: 12
        taxAmountCents:
          type: integer
          example: 12
        
    OrderStatus:
      type: string
      enum:
        - 'PROCESSED'
        - 'PROCESSING'
        - 'CANCELLED'
    LineItemDTO:
      type: object
      properties:
        assignId:
          nullable: false
          type: integer
        itemInstanceId:
          type: integer
          nullable: false
        subscriptionId:
          nullable: true
          type: integer
        itemPriceCents:
          nullable: false
          type: integer
        classSignup:
          nullable: true
          $ref: '#/components/schemas/ClassSignupDTO'
        membership:
          nullable: true
          $ref: '#/components/schemas/MembershipDTO'
        donation:
          nullable: true
          $ref: '#/components/schemas/DonationDTO'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/LineItemDiscountDTO'

    LineItemDiscountDTO:
      properties:
        assignId:
          nullable: false
          type: string
        discountInstanceId:
          nullable: false
          type: integer
        discountAmountCents:
          nullable: false
          type: integer
    ClassSignupDTO:
      properties:
        id:
          nullable: false
          type: string
        classInstanceId:
          nullable: false
          type: integer
        classType:
          nullable: false
          $ref: '#/components/schemas/ClassTypes'
        personId:
          nullable: false
          type: integer
    ClassTypes:
      type: string
      enum:
        - 'JP'
        - 'AP'
    MembershipDTO:
      properties:
        id:
          nullable: false
          type: string
        membershipTypeId:
          nullable: false
          type: integer
        personId:
          nullable: false
          type: integer
        startDate:
          nullable: true
          type: string
          format: date
    DonationDTO:
      properties:
        id:
          nullable: false
          type: string
        inNameOf:
          nullable: true
          type: string
        personId:
          nullable: false
          type: integer
    
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: user@example.com
        password:
          type: string
          format: password
          example: mysecurepassword
          maxLength: 69
        test:
          type: string
          format: password
          example: mysecurepassword

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    PersonId:
      type: object
      properties:
        personId:
          type: integer
          example: 192535
    UserTest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: user@example.com
        fullName:
          type: string
          example: John Doe
    TestRequest:
      type: object
      properties:
        derply:
          type: integer
          example: 1
        capacity:
          type: string
        dateTestReq:
          type: string
          format: date
        dateTimeTestReq:
          type: string
          format: date-time
    TestResponse:
      type: object
      properties:
        internalDiameter:
          type: integer
          example: 1
        dateTest:
          type: string
          format: date
        dateTimeTest:
          type: string
          format: date-time
    APEligibleClass:
      type: object
      properties:
        instanceId:
          type: integer
          example: 117
        typeName:
          type: string
          example: Intermediate 2
        sessionCount:
          type: integer
          example: 2
        sessionDates:
          type: array
          example: [01-APR-2010, 02-APR-2010]
          items:
            type: string
            format: date
        signupsAvailable:
          type: boolean
          example: T
        nextSignupsOpen:
          type: string
          format: date-time
        nextSignupsCount:
          type: integer
          example: 10
        instructor:
          type: string
          example: Joe L.
        location:
          type: string
          example: Dockhouse 
        booleanEnumTest:
          $ref: '#/components/schemas/Boolean'
          example: 'T'
    APFutureClass:
      type: object
      properties:
        enumTest:
          $ref: "#/components/schemas/EnumTest"
          example: 'A'
        instanceId:
          type: integer
          example: 117
        typeName:
          type: string
          example: Intermediate 2
        sessionCount:
          type: integer
          example: 2
        sessionDates:
          type: array
          example: [01-APR-2010, 02-APR-2010]
          items:
            type: string
            format: date
        sessionLengthMinutes:
          type: integer
          example: 120
        signupsAvailable:
          type: boolean
          example: Y
        nextSignupsOpen:
          type: string
          format: date-time
        nextSignupsCount:
          type: integer
          example: 10
        instructor:
          type: string
          example: Joe L.
        location:
          type: string
          example: Dockhouse 
    APClassEnroll:
      type: object
      properties:
        personId:
          type: integer
          example: 192535
        instanceId:
          type: integer
          example: 117
    EnumTest:
      type: string
      enum:
        - A
        - B
        - C
        - D
    Boolean:
      type: string
      enum:
        - T
        - F